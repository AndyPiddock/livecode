#!
 
send "doCompile" to me

private function pathdelimiter
   if the platform is "win32" then
      return backslash
   else
      return slash
   end if
end pathdelimiter

on doCompile
   local tArgs
   put the commandArguments into tArgs
   
   local tEngine
   put the commandName into tEngine
   
   set the itemdelimiter to pathdelimiter()
   
   local tUtilsFilename 
   put item 1 to -3 of the filename of this stack & the itemdel & \
      "extensions" & the itemDel & "script-libraries" & the itemdel & \ 
      "extension-utils" & the itemDel & \
      "extension-utils.livecodescript" into tUtilsFilename

   write tUtilsFilename & return to stdout

   start using stack tUtilsFilename
   
   -- All uses currently find lcb sources in a source folder
   local tSourceFolder
   put tArgs[3] into tSourceFolder

   local tFiles
   put GetFileNames(tSourceFolder, "lcb") into tFiles
   
   if the itemdel is backslash then
      replace slash with backslash in tSourceFolder
	  replace slash with backslash in tFiles
   end if
   
   local tSendCmd   
   switch tArgs[2]
   case "findandbuild"
      local tCount
      put "buildPackageAndExtractLCBExtensions" into tSendCmd
      repeat for each line tLine in tFiles
         add 1 to tCount
         put tSourceFolder & the itemdel & tLine into tArgs[8 + tCount]
      end repeat
      repeat with x = 4 to the number of elements in tArgs
         put " tArgs[" & x & "]," after tSendCmd
      end repeat
      delete the last char of tSendCmd      
      break
   case "findandcompile"
      local tPrefix, tPrefixBuild
      put tSourceFolder & the itemdel into tPrefix
   
   	  split tFiles by return
   	  combine tFiles with (return & tPrefix)
   	  put tPrefix before tFiles
      write tFiles & return to stdout
      extensionsDepsOrder tFiles
      if the result is not empty then
         write "failed" & return to stdout
         write the result to stderr
         quit 1   
      end if
      put it into tFiles
         
      local tLCI
      put item 1 to -3 of tArgs[1] & the itemdel & \
         "_tests" & the itemdel & "_build" & the itemdel & "lci" \
         into tLCI

      -- Figure out how to modify the path to put it in the tests build
      -- folder
      local tItemCount, tTestsItem
      repeat for each item tItem in tSourceFolder
         add 1 to tItemCount
         if tItem is "tests" then
            put tItemCount into tTestsItem
            exit repeat
         end if
      end repeat 
            
      local tOutput
      repeat for each line tFile in tFiles
         put tFile into tOutput      
         if tTestsItem is not empty then
            put "_tests" & slash & "_build" into item tTestsItem \
               of tOutput
         else
            put ".." & slash & "_tests" & slash & "_build" & slash \
               before tOutput
         end if      
         set the itemdelimiter to "."
         put "lcm" into item -1 of tOutput  
         set the itemdelimiter to pathdelimiter()
         extensionCompile tFile, "", tLCI, item 1 to -2 of tOutput, \
            item -1 of tOutput
      end repeat
      quit 0
   default
      write "invalid mode" && tArgs[2] to stderr
      quit 1
      break
   end switch
   try
      send tSendCmd to stack tUtilsFilename
   catch tError
      write tError to stderr
      quit 1
   end try
end doCompile

-- Get all files beneath the pBaseFolder with extension pExtension
private function GetFileNames pBaseFolder, pExtension
   local tList
   GetFileNamesRecursive pBaseFolder, empty, pExtension, tList

   return tList
end GetFileNames

private command appendToStringList @xList, pValue
   if xList is empty then
      put pValue into xList
   else
      put return & pValue after xList
   end if
end appendToStringList

private command GetFileNamesRecursive pPath, pRelPath, pExtension, @xList
   -- Process files in the current directory
   local tFile
   repeat for each line tFile in files(pPath)
      if tFile ends with ("." & pExtension) then

         if pRelPath is not empty then
            put pRelPath & slash before tFile
         end if
         
         appendToStringList xList, tFile
      end if
   end repeat

   -- Process subdirectories
   local tFolder, tFolderPath
   repeat for each line tFolder in folders(pPath)
      if tFolder begins with "." then
         next repeat
      end if

      put pPath & slash & tFolder into tFolderPath

      if pRelPath is not empty then
         put pRelPath & slash before tFolder
      end if

      GetFileNamesRecursive tFolderPath, tFolder, pExtension, xList
   end repeat
end GetFileNamesRecursive
